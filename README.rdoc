# Ruby on Rails Tutorial: sample application

This is the sample application for
the [*Ruby on Rails Tutorial*](http://railstutorial.org/)
by [Michael Hartl](http://michaelhartl.com/).

chapter -5

things to notice here

1.proper frontend design

application html.erb

header

<%= yield %>

footer

2.

a.link_to action (if same controller actiom)

      <li><%= link_to "Contact", "contact" %></li>

b.link_to action (if different controller actiom)

     <%= link_to "About",  {:controller => "test1", :action => "t"} %></li>

about_path -> '/about'
about_url  -> 'http://localhost:3000/about'

3. routes
get 'static_pages/about'

to

match '/about', to: 'static_pages#about',  via: 'get'

examples :

SampleApp::Application.routes.draw do
  root  'static_pages#home'
  match '/help',    to: 'static_pages#help',    via: 'get'
  match '/about',   to: 'static_pages#about',   via: 'get'
  match '/contact', to: 'static_pages#contact', via: 'get'
  match '/signup',  to: 'users#new',            via: 'get'
  match '/help',    to: 'static_pages#help',    via: 'get'
  .
  .
  .
end


4.using helper function in view

chapter 6

Note that, in contrast to the plural convention for controller names, model names are singular: a Users controller,
but a User model.

running migration

bundle exec rake db:migrate

db:rollback:

$ bundle exec rake db:rollback

rails console --sandbox
Loading development environment in sandbox (Rails 3.2.13)
Any modifications you make will be rolled back on exit


saving data in model

method: 1
user = User.new(name: "Michael Hartl", email: "mhartl@example.com")
user.save
returns true/false

method: 2
User.create(name: "A Nother", email: "another@example.org")
returns object

destroy
user.destroy

Finding user objects

based on id
User.find(1)

other parameters
User.find_by_email("mhartl@example.com")
from rails4
User.find_by(email: "mhartl@example.com")
User.all
User.first

Updating user objects

method:1
user
user.email = "mhartl@example.net"
user.save

method:2
user.update_attributes(name: "The Dude", email: "dude@abides.org")

Database reset:

bundle exec rake db:reset

Validations
(refer model file)

in console to check what type of error prevent from save.
user.errors.full_messages

format validations
(refer model file)

Uniqueness validation

The migration for enforcing email uniqueness.
refer Listing 6.19
adding indexes to email column of user table.

conver to lowercase before save into db
in user.rb
before_save { self.email = email.downcase }

Adding a secure password

achieved by has_secure_password method

create a column to existing table.
ex : rails generate migration add_email_to_users email:string

gem 'bcrypt-ruby', '3.1.2'

(refer model file)
---------------------------------
migration reference :

add column:
rails generate migration add_password_confirmation_to_users password_confirmation:string


remove column:
rails g migration remove_field_name_from_table_name field_name:datatype

down migration
rake db:migrate:down VERSION=20140224114216
----------------------------------

user.authenticate("foobar")


chapter 7

Debug and Rails environments
<%= debug(params) if Rails.env.development? %>

test rails environment

>> Rails.env
  => "development"
  >> Rails.env.development?
  => true
  >> Rails.env.test?
  => false

load environment in console


$ rails console test
  Loading test environment
  >> Rails.env
  => "test"
  >> Rails.env.test?
  => true

From rails server

rails server --environment production
or
rails server -e production

run db:migration in production mode

$ bundle exec rake db:migrate RAILS_ENV=production

HTTP standard

POST
GET
PATCH
DELETE

Gravator:

how to integrate gravitor into application(refer : Listing 7.12.)

form_for
refer Listing 7.17

cross-site request forgery (CSRF)

erb to html

<%= f.label :name %>
<%= f.text_field :name %>

produces the HTML

<label for="user_name">Name</label>
<input id="user_name" name="user[name]" type="text" />

drawack of @user = User.new(params[:user])
refer 7.3.2
mass assignment vulnerabilities
solution :
params.require(:user).permit(:name, :email, :password, :password_confirmation)

avoid mass assignment vulnerability

class UsersController < ApplicationController
  .
  .
  .
  def create
    @user = User.new(user_params)
    if @user.save
      # Handle a successful save.
    else
      render 'new'
    end
  end

  private

    def user_params
      params.require(:user).permit(:name, :email, :password,
                                   :password_confirmation)
    end
end

params.require(:user).permit(:name, :email, :password, :password_confirmation)

auxiliary method called user_params

@user = User.new(user_params)

Using strong parameters in the create action.

class UsersController < ApplicationController
  .
  .
  .
  def create
    @user = User.new(user_params)
    if @user.save
      # Handle a successful save.
    else
      render 'new'
    end
  end

  private

    def user_params
      params.require(:user).permit(:name, :email, :password,
                                   :password_confirmation)
    end
end


track error from console

$ rails console
>> user = User.new(name: "Foo Bar", email: "foo@invalid",
?>                 password: "dude", password_confirmation: "dude")
>> user.save
=> false
>> user.errors.full_messages
=> ["Email is invalid", "Password is too short (minimum is 6 characters)"]

>> user.errors.count
=> 2

>> user.errors.empty?
=> false
>> user.errors.any?
=> true

Deploying to production with SSL

Adding size to gravator

The flash ERb in the site layout using content_tag.

<div class="alert alert-<%= key %>"><%= value %></div>

to

<%= content_tag(:div, value, class: "alert alert-#{key}") %>

chapter 8

Embedded Ruby:

<% if signed_in? %>
  # Links for signed-in users
<% else %>
  # Links for non-signed-in-users
<% end %>

chapter 9

login accesses control

before_action :signed_in_user, only: [:edit, :update]
before_action :correct_user,   only: [:edit, :update]

private

  def signed_in_user
        redirect_to signin_url, notice: "Please sign in." unless signed_in?
  end

  def correct_user
        @user = User.find(params[:id])
        redirect_to(root_url) unless current_user?(@user)
  end

Pagination

index.html.erb

<%= will_paginate %>

users_controller.rb

def index
    @users = User.paginate(page: params[:page])
end

Admin status

$ rails console --sandbox
>> user = User.first
>> user.admin?
=> false
>> user.toggle!(:admin)
=> true
>> user.admin?
=> true

rake task

namespace :db do
  desc "Fill database with sample data"
  task populate: :environment do
    User.create!(name: "Example User",
                 email: "example@railstutorial.org",
                 password: "foobar",
                 password_confirmation: "foobar",
                 admin: true)
    99.times do |n|
      name  = Faker::Name.name
      email = "example-#{n+1}@railstutorial.org"
      password  = "password"
      User.create!(name: name,
                   email: email,
                   password: password,
                   password_confirmation: password)
    end
  end
end

HAck 1

PATHCH request for hack

patch /users/17?admin=1


this is accomplished using strong parameters by calling require and permit on the params hash:

    def user_params
      params.require(:user).permit(:name, :email, :password,
                                   :password_confirmation)
    end

Hack 2

Unfortunately, thereâ€™s still a terrible security hole: any sufficiently sophisticated attacker could
simply issue DELETE requests directly from the command line to delete any user on the site

app/controllers/users_controller.rb
 before_action :admin_user,     only: :destroy

private
    .
    .
    .
    def admin_user
      redirect_to(root_url) unless current_user.admin?
    end

Hacck 3

admin should not delete him self

Chapter 10

lazy evaluation(Proc (procedure) or lambda)
-> { order('created_at DESC') }

Micropost.where instead of Micropost.find

Here we have used Micropost.where instead of Micropost.find because it returns an empty object if the record
is not found instead of raising an exception, which is a little easier to test.

microposts.each do |micropost|
  expect(Micropost.where(id: micropost.id)).to be_empty
end


expect do
  Micropost.find(micropost)
end.to raise_error(ActiveRecord::RecordNotFound)


importent in chapter 10

1.new methods based on relatioship between tables.
2.partials to use dynamic object insted of static object.

